<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>text_my_iste</title>
    <url>/2020/10/20/text-my-iste/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>行逻辑链接实现矩阵相乘</title>
    <url>/2020/10/22/%E8%A1%8C%E9%80%BB%E8%BE%91%E9%93%BE%E6%8E%A5%E5%AE%9E%E7%8E%B0%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98/</url>
    <content><![CDATA[<p>1、（普通算法时间复杂度为m<em>n</em>p）</p>
<p>2、矩阵相乘的前提条件：乘号前的矩阵的列数要等于乘号后矩阵的行数。（矩阵乘法无交换律）（前行x后列）</p>
<p>3、计算方法是：用矩阵A的第 i 行和矩阵B中的每一列 j 对应的数值做乘法运算，乘积一一相加，所得结果即为矩阵 C 中第 i 行第 j 列的值。</p>
<p>实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 1200</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXRC 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> i, j;<span class="comment">//行，列</span></span><br><span class="line">    ElemType e;<span class="comment">//元素值</span></span><br><span class="line">&#125;Triple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Triple  data[MAXSIZE + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> rpos[MAXRC + <span class="number">1</span>];<span class="comment">//每行第一个非零元素在data数组中的位置</span></span><br><span class="line">    <span class="keyword">int</span> mu, nu, tu;<span class="comment">//行数，列数，元素个数</span></span><br><span class="line">&#125;RLSMatrix;</span><br><span class="line"></span><br><span class="line"><span class="function">RLSMatrix <span class="title">MultSMatrix</span><span class="params">(RLSMatrix A, RLSMatrix B, RLSMatrix C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//如果矩阵A的列数与矩阵B的行数不等，则不能做矩阵乘运算</span></span><br><span class="line">    <span class="keyword">if</span> (A.nu != B.mu)</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    C.mu = A.mu;</span><br><span class="line">    C.nu = B.nu;</span><br><span class="line">    C.tu = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果其中任意矩阵的元素个数为零，做乘法元素没有意义，全是0</span></span><br><span class="line">    <span class="keyword">if</span> (A.tu * B.tu == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> arow;</span><br><span class="line">        <span class="keyword">int</span> ccol;</span><br><span class="line">        <span class="comment">//遍历矩阵A的每一行</span></span><br><span class="line">        <span class="keyword">for</span> (arow = <span class="number">1</span>; arow &lt;= A.mu; arow++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//创建一个临时存储乘积结果的数组，且初始化为0，遍历每次都需要清空</span></span><br><span class="line">            <span class="keyword">int</span> ctemp[MAXRC + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAXRC + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                ctemp[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            C.rpos[arow] = C.tu + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//根据行数，在三元组表中找到该行所有的非0元素的位置</span></span><br><span class="line">            <span class="keyword">int</span> tp;</span><br><span class="line">            <span class="keyword">if</span> (arow &lt; A.mu)</span><br><span class="line">                tp = A.rpos[arow + <span class="number">1</span>];<span class="comment">//获取矩阵A的下一行第一个非零元素在data数组中位置</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                tp = A.tu + <span class="number">1</span>;<span class="comment">//若当前行是最后一行，则取最后一个元素+1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> p;</span><br><span class="line">            <span class="keyword">int</span> brow;</span><br><span class="line">            <span class="comment">//遍历当前行的所有的非0元素</span></span><br><span class="line">            <span class="keyword">for</span> (p = A.rpos[arow]; p &lt; tp; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                brow = A.data[p].j;<span class="comment">//取该非0元素的列数，便于去B中找对应的做乘积的非0元素</span></span><br><span class="line">                <span class="keyword">int</span> t;</span><br><span class="line">                <span class="comment">// 判断如果对于A中非0元素，找到矩阵B中做乘法的那一行中的所有的非0元素</span></span><br><span class="line">                <span class="keyword">if</span> (brow &lt; B.mu)</span><br><span class="line">                    t = B.rpos[brow + <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    t = B.tu + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> q;</span><br><span class="line">                <span class="comment">//遍历找到的对应的非0元素，开始做乘积运算</span></span><br><span class="line">                <span class="keyword">for</span> (q = B.rpos[brow]; q &lt; t; q++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//得到的乘积结果，每次和ctemp数组中相应位置的数值做加和运算</span></span><br><span class="line">                    ccol = B.data[q].j;</span><br><span class="line">                    ctemp[ccol] += A.data[p].e * B.data[q].e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//矩阵C的行数等于矩阵A的行数，列数等于矩阵B的列数，所以，得到的ctemp存储的结果，也会在C的列数的范围内</span></span><br><span class="line">            <span class="keyword">for</span> (ccol = <span class="number">1</span>; ccol &lt;= C.nu; ccol++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//由于结果可以是0，而0不需要存储，所以在这里需要判断</span></span><br><span class="line">                <span class="keyword">if</span> (ctemp[ccol])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//不为0，则记录矩阵中非0元素的个数的变量tu要+1；且该值不能超过存放三元素数组的空间大小</span></span><br><span class="line">                    <span class="keyword">if</span> (++C.tu &gt; MAXSIZE)</span><br><span class="line">                        <span class="keyword">return</span> C;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        C.data[C.tu].e = ctemp[ccol];</span><br><span class="line">                        C.data[C.tu].i = arow;</span><br><span class="line">                        C.data[C.tu].j = ccol;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    RLSMatrix M, N, T;</span><br><span class="line"></span><br><span class="line">    M.tu = <span class="number">4</span>;</span><br><span class="line">    M.mu = <span class="number">3</span>;</span><br><span class="line">    M.nu = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    M.rpos[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    M.rpos[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    M.rpos[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    M.data[<span class="number">1</span>].e = <span class="number">3</span>;</span><br><span class="line">    M.data[<span class="number">1</span>].i = <span class="number">1</span>;</span><br><span class="line">    M.data[<span class="number">1</span>].j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    M.data[<span class="number">2</span>].e = <span class="number">5</span>;</span><br><span class="line">    M.data[<span class="number">2</span>].i = <span class="number">1</span>;</span><br><span class="line">    M.data[<span class="number">2</span>].j = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    M.data[<span class="number">3</span>].e = <span class="number">-1</span>;</span><br><span class="line">    M.data[<span class="number">3</span>].i = <span class="number">2</span>;</span><br><span class="line">    M.data[<span class="number">3</span>].j = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    M.data[<span class="number">4</span>].e = <span class="number">2</span>;</span><br><span class="line">    M.data[<span class="number">4</span>].i = <span class="number">3</span>;</span><br><span class="line">    M.data[<span class="number">4</span>].j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    N.tu = <span class="number">4</span>;</span><br><span class="line">    N.mu = <span class="number">4</span>;</span><br><span class="line">    N.nu = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    N.rpos[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    N.rpos[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    N.rpos[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">    N.rpos[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    N.data[<span class="number">1</span>].e = <span class="number">2</span>;</span><br><span class="line">    N.data[<span class="number">1</span>].i = <span class="number">1</span>;</span><br><span class="line">    N.data[<span class="number">1</span>].j = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    N.data[<span class="number">2</span>].e = <span class="number">1</span>;</span><br><span class="line">    N.data[<span class="number">2</span>].i = <span class="number">2</span>;</span><br><span class="line">    N.data[<span class="number">2</span>].j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    N.data[<span class="number">3</span>].e = <span class="number">-2</span>;</span><br><span class="line">    N.data[<span class="number">3</span>].i = <span class="number">3</span>;</span><br><span class="line">    N.data[<span class="number">3</span>].j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    N.data[<span class="number">4</span>].e = <span class="number">4</span>;</span><br><span class="line">    N.data[<span class="number">4</span>].i = <span class="number">3</span>;</span><br><span class="line">    N.data[<span class="number">4</span>].j = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    T = MultSMatrix(M, N, T);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T.tu; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;(%d,%d,%d)\n&quot;</span>, T.data[i].i, T.data[i].j, T.data[i].e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
